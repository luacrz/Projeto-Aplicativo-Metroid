la t0,DELAY
		lh t0,0(t0)
		li t1,40
		rem t1,t0,t1
		bnez t1,PRINT_RIDLEY
		la t0,RIDLEY_POS
		lw t1,16(t0)
		bnez t1,RIDLEY_CONGELADO
		call MOVE_RIDLEY
		j PRINT_RIDLEY
				
		PRINT_RIDLEY:	la t0,RIDLEY_POS
				lw t1,12(t0)
				blez t1,SKIP_RIDLEY
				lw t1,8(t0)
				li t2,1
				beq t1,t2,RIDLEY_FRAME_FE
				li t2,2
				beq t1,t2,RIDLEY_FRAME_AB
		
		RIDLEY_FRAME_FE:
				la a0,ridley1
				j PRINT_RIDLEY1
				
		RIDLEY_FRAME_AB:
				la a0,ridley2
				
		PRINT_RIDLEY1:	la t0,RIDLEY_POS # carrega a posição do pesonagem em t0
				lw a1,0(t0) # posição horizontal
				lw a2,4(t0) # posição vertical
				la t1,MAP_POS
				lw t1,4(t1)
				blt a2,t1,SKIP_RIDLEY
				#### LIDA COM TODA A PARTE DE MOVIMENTAR E PRINTAR O ZOOMER, APENAS SE ELE ESTIVER NA TELA
				
				la t1,MAP_POS # carrega a posição do mapa para saber onde o personagem esta nele
				lw a4,4(t1)
				sub a2,a2,a4 # realiza a subtração da posição do personagem no mapa pela tela do mapa
				
				mv a3,s0 # alterna o frame em que trabalhamos, definir o frame atual na verdade
				call PRINT # CHAMA A FUNÇÃO QUE PRINTA A SAMUS
			
	SKIP_RIDLEY:












DANO_SAMUS_RIDLEY: # verifica se a samus está encostada no ridley
			la a0,DELAY
			lh a1,0(a0)
			li a0,100
			rem a1,a1,a0
			bnez a1,END_LOOP_3
			
			la a1,CHAR_POS
			lw a0,0(a1)
			lw a1,4(a1)
			li a2,24
			li a3,32
			
			la t1,RIDLEY_POS
			lw t0,0(t1)
			lw t1,4(t1)
			li t2,32
			li t3,40
			call VERIFICA_HIT_BOX
			
			beqz a6,END_LOOP_3
			
			# se a colisão foi detectada, a samus perde vida
			la a0,LIFE_SAMUS
			lw a1,0(a0)
			addi a1,a1,-5
			sw a1,0(a0)